# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

trigger:
  batch: true
  branches:
    include:
      - main
  paths:
    include:
      - backend/api/*
      - deployment/*
      - ml/*
      - portal/*

variables:
  - template: ./azure-pipelines-variables.yml

pool:
  vmImage: "windows-latest"

steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: "3.7"
    displayName: "Install Python"

  - task: NodeTool@0
    inputs:
      versionSpec: "12.x"
    displayName: "Install Node.js"

  - task: UseDotNet@2
    displayName: "Install .NET Core"
    inputs:
      version: 3.1.x

  - task: Cache@2
    inputs:
      key: 'python | "$(Agent.OS)" | ./ml/requirements-dev.txt'
      restoreKeys: |
        python | "$(Agent.OS)"
        python
      path: $(PIP_CACHE_DIR)
    displayName: "Cache pip packages"

  - task: Cache@2
    inputs:
      key: 'npm | "$(Agent.OS)" | ./backend/test/package-lock.json'
      restoreKeys: |
        npm | "$(Agent.OS)"
      path: $(npm_config_cache)
    displayName: "Cache test npm packages"

  - task: Cache@2
    inputs:
      key: 'npm | "$(Agent.OS)" | ./portal/package-lock.json'
      restoreKeys: |
        npm | "$(Agent.OS)"
      path: $(npm_config_cache)
    displayName: "Cache portal npm packages"

  - pwsh: |
      az login `
        --service-principal `
        --username '$(servicePrincipalAppId)' `
        --password '$(servicePrincipalSecret)' `
        --tenant '$(servicePrincipalTenant)'
      az account set `
        --subscription '$(servicePrincipalSubscription)'
    displayName: "Login to Azure"

  - script: |
      python -m pip install -r requirements-dev.txt
    workingDirectory: ./ml
    displayName: "Install pip dependencies"

  - pwsh: |
      if ('$(Build.Reason)' -eq 'PullRequest')
      {
        $appName = 'h3pr' + '$(Build.SourceBranch)'.Split('/')[2]
      }
      else
      {
        $appName = '$(appName)'
      }

      $retain = $appName -eq 'h3dev'

      ./deployment/deploy.ps1 `
        -Retain $retain `
        -AppName $appName `
        -BuildId '$(Build.BuildId)' `
        -Location '$(appLocation)' `
        -WithingsClientId '$(withingsClientId)' `
        -WithingsClientSecret '$(withingsClientSecret)' `
        -FirebaseServerKey '$(firebaseServerKey)' `
        -iosKeyId '$(iosKeyId)' `
        -iosBundleId '$(iosBundleId)' `
        -iosTeamId '$(iosTeamId)' `
        -iosPushToken '$(iosPushToken)' `
        -B2cClientId '$(b2cClientId)' `
        -B2cTenantId '$(b2cTenantId)' `
        -B2cPolicyName '$(b2cPolicyName)' `
        -B2cTenantName '$(b2cTenantName)'
    displayName: "Run deployment of resources and code"

  - script: npm ci
    workingDirectory: ./backend/test
    displayName: "Install test dependencies"

  - pwsh: |
      $env:B2C_PASSWORD = '$(password_b2c_clewolff)'
      $env:B2C_USERNAME = '$(username_b2c_clewolff)'

      $env:WITHINGS_PASSWORD = '$(password_withings_clewolff)'
      $env:WITHINGS_USERNAME = '$(username_withings_clewolff)'
      $env:WITHINGS_USER_ID = '$(userid_withings_clewolff)'

      npm test
    workingDirectory: ./backend/test
    displayName: "Run end-to-end tests (clewolff)"

  - pwsh: |
      $env:B2C_PASSWORD = '$(password_b2c_algolesh)'
      $env:B2C_USERNAME = '$(username_b2c_algolesh)'

      $env:WITHINGS_PASSWORD = '$(password_withings_algolesh)'
      $env:WITHINGS_USERNAME = '$(username_withings_algolesh)'
      $env:WITHINGS_USER_ID = '$(userid_withings_algolesh)'

      npm test
    workingDirectory: ./backend/test
    displayName: "Run end-to-end tests (algolesh)"
