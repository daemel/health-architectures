// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "appName": {
      "type": "string",
      "minLength": 3,
      "maxLength": 8,
      "defaultValue": "h3devs",
      "metadata": {
        "description": "Name for the deployment"
      }
    },
    "withingsClientId": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Client id of the withings OAuth application"
      }
    },
    "withingsClientSecret": {
      "type": "securestring",
      "minLength": 1,
      "metadata": {
        "description": "Client secret of the withings OAuth application"
      }
    },
    "firebaseServerKey": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Firebase server key for Android push notifications"
      }
    },
    "iosKeyId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Push token Key ID from Apple"
      }
    },
    "iosBundleId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Bundle ID of application"
      }
    },
    "iosTeamId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Team ID (app prefix)"
      }
    },
    "iosPushToken": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Token for the iOS push notifications"
      }
    },
    "b2cClientId": {
      "type": "string",
      "minLength": 36,
      "maxLength": 36,
      "metadata": {
        "description": "Id of the client application used for B2C authentication"
      }
    },
    "b2cTenantName": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Name of the tenant used for B2C authentication"
      }
    },
    "b2cTenantId": {
      "type": "string",
      "minLength": 36,
      "maxLength": 36,
      "metadata": {
        "description": "Id of the tenant used for B2C authentication"
      }
    },
    "b2cPolicyName": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Name of the user flow policy used for B2C authentication"
      }
    },
    // SKU parameters
    "notificationHubsSku": {
      "type": "string",
      "defaultValue": "Basic",
      "allowedValues": [
        "Free",
        "Basic",
        "Standard"
      ]
    },
    "storageAccountSku": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_RAGRS"
      ]
    },
    "keyVaultSku": {
      "type": "string",
      "defaultValue": "Standard",
      "allowedValues": [
        "Standard",
        "Premium"
      ]
    },
    "serviceBusSku": {
      "type": "string",
      "defaultValue": "Standard",
      "allowedValues": [
        "Basic",
        "Standard",
        "Premium"
      ]
    },
    "functionsSku": {
      "type": "string",
      "defaultValue": "EP1",
      "allowedValues": [
        "EP1",
        "EP2",
        "EP3"
      ]
    },
    "redisSku": {
      "type": "string",
      "defaultValue": "Standard",
      "allowedValues": [
        "Basic",
        "Standard",
        "Premium"
      ]
    },
    "redisSize": {
      "type": "string",
      "defaultValue": "2",
      "allowedValues": [
        "1",
        "2",
        "3",
        "4"
      ]
    },
    "cdnSku": {
      "type": "string",
      "defaultValue": "Standard_Akamai",
      "allowedValues": [
        "Standard_Akamai",
        "Standard_Microsoft",
        "Standard_Verizon",
        "Premium_Verizon"
      ]
    },
    "apiManagementPublisherName": {
      "type": "string",
      "defaultValue": "H3 Team",
      "minLength": 1
    },
    "apiManagementPublisherEmail": {
      "type": "string",
      "defaultValue": "h3eng@microsoft.com",
      "minLength": 1
    },
    "apiManagementSku": {
      "type": "string",
      "defaultValue": "Standard",
      "allowedValues": [
        "Basic",
        "Standard",
        "Premium"
      ]
    },
    "apiManagementCapacity": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 1,
      "maxValue": 10
    },
    "databricksSku": {
      "type": "string",
      "defaultValue": "standard",
      "allowedValues": [
        "standard",
        "premium"
      ]
    },
    "cosmosThroughput": {
      "type": "int",
      "defaultValue": 1000,
      "minValue": 400,
      "maxValue": 10000
    }
  },
  "variables": {
    // #region API variables
    "apiPrefix": "api",
    "apiName": "[concat(parameters('appName'), 'api')]",
    "apiManagementName": "[variables('apiName')]",
    "apiManagementApiName": "[variables('apiName')]",
    "apiFhirServiceName": "[concat(variables('apiName'), 'fhir')]",
    "apiFhirServiceUrl": "[concat('https://', variables('apiFhirServiceName'), '.azurehealthcareapis.com')]",
    "apiDbName": "[concat(variables('apiName'), 'db')]",
    "apiDbDatabaseName": "[variables('apiName')]",
    "apiDbContainerName": "consent",
    "apiDbConnectionStringSecretName": "[concat(variables('apiDbName'), 'connectionstring')]",
    "apiTokenStoreName": "[concat(variables('apiName'), 'tokens')]",
    "apiTokenStoreUrl": "[concat('https://', variables('apiTokenStoreName'), '.vault.azure.net')]",
    "apiSecretStoreName": "[concat(variables('apiName'), 'secrets')]",
    "apiCacheName": "[concat(variables('apiName'), 'redis')]",
    "apiCachePasswordSecretName": "[concat(variables('apiCacheName'), 'password')]",
    "apiCacheHostName": "[concat(variables('apiCacheName'), '.redis.cache.windows.net')]",
    "apiWithingsClientSecretName": "withingsclientsecret",
    "apnsCredential": {
      "properties": {
        "keyId": "[parameters('iosKeyId')]",
        "appName": "[parameters('iosBundleId')]",
        "appId": "[parameters('iosTeamId')]",
        "token": "[parameters('iosPushToken')]",
        "endpoint": "https://api.sandbox.push.apple.com:443/3/device" // use gateway.push.apple.com for production
      }
    },
    "apnsDisabled": "[empty(parameters('iosPushToken'))]",
    "gcmCredential": {
      "properties": {
        "googleApiKey": "[parameters('firebaseServerKey')]"
      }
    },
    "gcmDisabled": "[empty(parameters('firebaseServerKey'))]",
    "apiNotificationNamespaceName": "[concat(variables('apiName'), 'notifications')]",
    "apiNotificationHubName": "[variables('apiName')]",
    "apiNotificationHubListenPolicySecretName": "[concat(variables('apiNotificationHubName'), 'listen')]",
    "apiNotificationHubFullPolicySecretName": "[concat(variables('apiNotificationHubName'), 'full')]",
    "apiJobsNamespaceName": "[concat(variables('apiName'), 'jobs')]",
    "apiJobsWithingsNotificationQueueName": "withingsnotification",
    "apiJobsNamespaceAuthRuleSecretName": "[concat(variables('apiJobsNamespaceName'), 'authrule')]",
    // #endregion
    // #region Portal variables
    "portalName": "[concat(parameters('appName'), 'portal')]",
    "portalCdnName": "[concat(variables('portalName'), 'cdn')]",
    "portalCdnEndpointName": "[variables('portalName')]",
    // #endregion
    // #region ARM template helper variables
    "subscriptionId": "[subscription().subscriptionId]",
    "tenantId": "[subscription().tenantId]",
    "location": "[resourceGroup().location]"
    // #endregion
  },
  "resources": [
    // #region Portal
    // Static website storage account to hold Portal client-side app
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('portalName')]",
      "apiVersion": "2019-06-01",
      "location": "[variables('location')]",
      "kind": "StorageV2",
      "sku": {
        "name": "[parameters('storageAccountSku')]"
      },
      "resources": [
        {
          "type": "blobServices",
          "name": "default",
          "apiVersion": "2019-06-01",
          "dependsOn": [
            "[resourceId('Microsoft.Storage/storageAccounts', variables('portalName'))]"
          ],
          "properties": {
            "cors": {
              "corsRules": [
                // This rule is needed so that our customized B2C login flow can fetch assets from the Portal
                // See https://docs.microsoft.com/en-us/azure/active-directory-b2c/tutorial-customize-ui#enable-cors
                {
                  "allowedOrigins": [
                    "[concat('https://', parameters('b2cTenantName'), '.b2clogin.com')]"
                  ],
                  "allowedMethods": [
                    "GET",
                    "OPTIONS"
                  ],
                  "allowedHeaders": [
                    "*"
                  ],
                  "exposedHeaders": [
                    "*"
                  ],
                  "maxAgeInSeconds": 200
                }
              ]
            }
          }
        }
      ]
    },
    // CDN to front Portal storage account
    {
      "type": "Microsoft.Cdn/profiles",
      "name": "[variables('portalCdnName')]",
      "apiVersion": "2019-12-31",
      "location": "[variables('location')]",
      "sku": {
        "name": "[parameters('cdnSku')]"
      },
      "properties": {},
      "resources": [
        {
          "type": "endpoints",
          "name": "[variables('portalCdnEndpointName')]",
          "apiVersion": "2019-12-31",
          "location": "[variables('location')]",
          "dependsOn": [
            "[resourceId('Microsoft.Cdn/profiles', variables('portalCdnName'))]"
          ],
          "properties": {
            "originHostHeader": "[replace(replace(reference(concat('Microsoft.Storage/storageAccounts/', variables('portalName'))).primaryEndpoints.web, 'https://', ''), '/', '')]",
            "isHttpAllowed": false,
            "isHttpsAllowed": true,
            "queryStringCachingBehavior": "IgnoreQueryString",
            "contentTypesToCompress": [
              "application/javascript",
              "application/json",
              "application/xml",
              "image/svg+xml",
              "text/css",
              "text/html",
              "text/javascript",
              "text/js",
              "text/xml"
            ],
            "isCompressionEnabled": true,
            "origins": [
              {
                "name": "portal",
                "properties": {
                  "hostName": "[replace(replace(reference(concat('Microsoft.Storage/storageAccounts/', variables('portalName'))).primaryEndpoints.web, 'https://', ''), '/', '')]"
                }
              }
            ]
          }
        }
      ]
    },
    // #endregion
    // #region API
    // NotificationHub to send push notifications
    {
      "type": "Microsoft.NotificationHubs/namespaces",
      "apiVersion": "2017-04-01",
      "name": "[variables('apiNotificationNamespaceName')]",
      "location": "[variables('location')]",
      "sku": {
        "name": "[parameters('notificationHubsSku')]"
      },
      "kind": "NotificationHub",
      "properties": {},
      "resources": [
        {
          "type": "Microsoft.NotificationHubs/namespaces/notificationHubs",
          "apiVersion": "2017-04-01",
          "name": "[concat(variables('apiNotificationNamespaceName'), '/', variables('apiNotificationHubName'))]",
          "location": "[variables('location')]",
          "dependsOn": [
            "[resourceId('Microsoft.NotificationHubs/namespaces', variables('apiNotificationNamespaceName'))]"
          ],
          "properties": {
            "apnsCredential": "[if(variables('apnsDisabled'), null(), variables('apnsCredential'))]",
            "gcmCredential": "[if(variables('gcmDisabled'), null(), variables('gcmCredential'))]"
          }
        }
      ]
    },
    // Store authorization rule for client-side NotificationHub access in KeyVault
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "name": "[concat(variables('apiSecretStoreName'), '/', variables('apiNotificationHubListenPolicySecretName'))]",
      "apiVersion": "2016-10-01",
      "dependsOn": [
        "[resourceId('Microsoft.NotificationHubs/namespaces/notificationHubs', variables('apiNotificationNamespaceName'), variables('apiNotificationHubName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('apiSecretStoreName'))]"
      ],
      "properties": {
        "value": "[listKeys(resourceId('Microsoft.NotificationHubs/namespaces/notificationHubs/AuthorizationRules', variables('apiNotificationNamespaceName'), variables('apiNotificationHubName'), 'DefaultListenSharedAccessSignature'), '2016-03-01').primaryConnectionString]"
      }
    },
    // Store authorization rule for server-side NotificationHub access in KeyVault
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "name": "[concat(variables('apiSecretStoreName'), '/', variables('apiNotificationHubFullPolicySecretName'))]",
      "apiVersion": "2016-10-01",
      "dependsOn": [
        "[resourceId('Microsoft.NotificationHubs/namespaces/notificationHubs', variables('apiNotificationNamespaceName'), variables('apiNotificationHubName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('apiSecretStoreName'))]"
      ],
      "properties": {
        "value": "[listKeys(resourceId('Microsoft.NotificationHubs/namespaces/notificationHubs/AuthorizationRules', variables('apiNotificationNamespaceName'), variables('apiNotificationHubName'), 'DefaultFullSharedAccessSignature'), '2016-03-01').primaryConnectionString]"
      }
    },
    // ServiceBus to run API background jobs
    {
      "apiVersion": "2017-04-01",
      "type": "Microsoft.ServiceBus/namespaces",
      "name": "[variables('apiJobsNamespaceName')]",
      "location": "[variables('location')]",
      "sku": {
        "name": "[parameters('serviceBusSku')]"
      },
      "properties": {},
      "resources": [
        {
          "apiVersion": "2017-04-01",
          "type": "queues",
          "name": "[variables('apiJobsWithingsNotificationQueueName')]",
          "dependsOn": [
            "[resourceId('Microsoft.ServiceBus/namespaces', variables('apiJobsNamespaceName'))]"
          ],
          "properties": {
            "lockDuration": "PT5M"
          }
        }
      ]
    },
    // Authorize API Azure Function to communicate with ServiceBus
    {
      "apiVersion": "2017-04-01",
      "type": "Microsoft.ServiceBus/namespaces/authorizationRules",
      "name": "[concat(variables('apiJobsNamespaceName'), '/', variables('apiName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces', variables('apiJobsNamespaceName'))]"
      ],
      "properties": {
        "rights": [
          "Send",
          "Manage",
          "Listen"
        ]
      }
    },
    // Store authorization rule for API to ServiceBus access in KeyVault
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "name": "[concat(variables('apiSecretStoreName'), '/', variables('apiJobsNamespaceAuthRuleSecretName'))]",
      "apiVersion": "2016-10-01",
      "dependsOn": [
        "[resourceId('Microsoft.ServiceBus/namespaces/authorizationRules', variables('apiJobsNamespaceName'), variables('apiName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('apiSecretStoreName'))]"
      ],
      "properties": {
        "value": "[listKeys(resourceId('Microsoft.ServiceBus/namespaces/authorizationRules', variables('apiJobsNamespaceName'), variables('apiName')), '2017-04-01').primaryConnectionString]"
      }
    },
    // FHIR service for API data storage
    {
      "type": "Microsoft.HealthcareApis/services",
      "kind": "fhir-R4",
      "name": "[variables('apiFhirServiceName')]",
      "apiVersion": "2019-09-16",
      "location": "[variables('location')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "accessPolicies": [],
        "authenticationConfiguration": {
          "audience": "[variables('apiFhirServiceUrl')]",
          "authority": "[concat('https://login.microsoftonline.com/', variables('tenantId'))]",
          "smartProxyEnabled": false
        },
        "cosmosDbConfiguration": {
          "offerThroughput": "[parameters('cosmosThroughput')]"
        }
      }
    },
    // Management layer for API
    {
      "name": "[variables('apiManagementName')]",
      "type": "Microsoft.ApiManagement/service",
      "apiVersion": "2019-12-01",
      "location": "[variables('location')]",
      "properties": {
        "publisherEmail": "[parameters('apiManagementPublisherEmail')]",
        "publisherName": "[parameters('apiManagementPublisherName')]"
      },
      "sku": {
        "name": "[parameters('apiManagementSku')]",
        "capacity": "[parameters('apiManagementCapacity')]"
      }
    },
    // KeyVault to store API secrets
    {
      "type": "Microsoft.KeyVault/vaults",
      "name": "[variables('apiSecretStoreName')]",
      "apiVersion": "2016-10-01",
      "location": "[variables('location')]",
      "properties": {
        "enabledForDeployment": false,
        "enabledForDiskEncryption": false,
        "enabledForTemplateDeployment": false,
        "tenantId": "[variables('tenantId')]",
        "accessPolicies": [],
        "enableSoftDelete": true,
        "sku": {
          "name": "[parameters('keyVaultSku')]",
          "family": "A"
        },
        "networkAcls": {
          "defaultAction": "Allow",
          "bypass": "AzureServices"
        }
      }
    },
    // Enable API Azure Function to access KeyVault so that AppService KeyVault reference settings work
    {
      "type": "Microsoft.KeyVault/vaults/accessPolicies",
      "name": "[concat(variables('apiSecretStoreName'), '/add')]",
      "apiVersion": "2016-10-01",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('apiSecretStoreName'))]",
        "[resourceId('Microsoft.Web/sites', variables('apiName'))]"
      ],
      "properties": {
        "accessPolicies": [
          {
            "objectId": "[reference(concat('Microsoft.Web/sites/', variables('apiName')), '2018-11-01', 'Full').identity.principalId]",
            "tenantId": "[reference(concat('Microsoft.Web/sites/', variables('apiName')), '2018-11-01', 'Full').identity.tenantId]",
            "permissions": {
              "secrets": [ "get" ]
            }
          }
        ]
      }
    },
    // KeyVault to store Withings tokens
    {
      "type": "Microsoft.KeyVault/vaults",
      "name": "[variables('apiTokenStoreName')]",
      "apiVersion": "2016-10-01",
      "location": "[variables('location')]",
      "properties": {
        "enabledForDeployment": false,
        "enabledForDiskEncryption": false,
        "enabledForTemplateDeployment": false,
        "tenantId": "[variables('tenantId')]",
        "accessPolicies": [],
        "enableSoftDelete": true,
        "sku": {
          "name": "[parameters('keyVaultSku')]",
          "family": "A"
        },
        "networkAcls": {
          "defaultAction": "Allow",
          "bypass": "AzureServices"
        }
      }
    },
    // Enable API Azure Function to read/write in token store
    {
      "type": "Microsoft.KeyVault/vaults/accessPolicies",
      "name": "[concat(variables('apiTokenStoreName'), '/add')]",
      "apiVersion": "2016-10-01",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('apiTokenStoreName'))]",
        "[resourceId('Microsoft.Web/sites', variables('apiName'))]"
      ],
      "properties": {
        "accessPolicies": [
          {
            "objectId": "[reference(concat('Microsoft.Web/sites/', variables('apiName')), '2018-11-01', 'Full').identity.principalId]",
            "tenantId": "[reference(concat('Microsoft.Web/sites/', variables('apiName')), '2018-11-01', 'Full').identity.tenantId]",
            "permissions": {
              "secrets": [ "get", "set", "delete", "purge" ]
            }
          }
        ]
      }
    },
    // RBAC rule to authenticate API Azure Function with FHIR Service
    {
      "type": "Microsoft.HealthcareApis/services/providers/roleAssignments",
      "apiVersion": "2018-09-01-preview",
      "name": "[concat(variables('apiFhirServiceName'), '/Microsoft.Authorization/', guid(concat('ApiToFhirService', resourceGroup().name)))]",
      "dependsOn": [
        "[resourceId('Microsoft.HealthcareApis/services', variables('apiFhirServiceName'))]",
        "[resourceId('Microsoft.Web/sites', variables('apiName'))]"
      ],
      "properties": {
        "roleDefinitionId": "[concat('/subscriptions/', variables('subscriptionId'), '/providers/Microsoft.Authorization/roleDefinitions/5a1fc7df-4bf1-4951-a576-89034ee01acd')]",
        "principalId": "[reference(concat('Microsoft.Web/sites/', variables('apiName')), '2018-11-01', 'Full').identity.principalId]",
        "principalType": "ServicePrincipal"
      }
    },
    // Redis Cache for API
    {
      "type": "Microsoft.Cache/Redis",
      "name": "[variables('apiCacheName')]",
      "apiVersion": "2019-07-01",
      "location": "[variables('location')]",
      "properties": {
        "sku": {
          "name": "[parameters('redisSku')]",
          "family": "[if(equals(parameters('redisSku'), 'Premium'), 'P', 'C')]",
          "capacity": "[parameters('redisSize')]"
        }
      }
    },
    // Store Redis password in KeyVault
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "name": "[concat(variables('apiSecretStoreName'), '/', variables('apiCachePasswordSecretName'))]",
      "apiVersion": "2016-10-01",
      "dependsOn": [
        "[resourceId('Microsoft.Cache/Redis', variables('apiCacheName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('apiSecretStoreName'))]"
      ],
      "properties": {
        "value": "[listKeys(resourceId('Microsoft.Cache/Redis', variables('apiCacheName')), '2018-03-01').primaryKey]"
      }
    },
    // Backing storage account for API Azure Function
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('apiName')]",
      "apiVersion": "2019-06-01",
      "location": "[variables('location')]",
      "kind": "StorageV2",
      "sku": {
        "name": "[parameters('storageAccountSku')]"
      }
    },
    // Hosting plan for API Azure Function
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2018-02-01",
      "name": "[variables('apiName')]",
      "location": "[variables('location')]",
      "sku": {
        "name": "[parameters('functionsSku')]",
        "tier": "ElasticPremium"
      },
      "properties": {
        "name": "[variables('apiName')]",
        "maximumElasticWorkerCount": 20
      }
    },
    // Monitoring for API Azure Function
    {
      "apiVersion": "2015-05-01",
      "name": "[variables('apiName')]",
      "type": "Microsoft.Insights/components",
      "location": "[variables('location')]",
      "kind": "web",
      "tags": {
        "[concat('hidden-link:', resourceId('Microsoft.Web/sites', variables('apiName')))]": "Resource"
      },
      "properties": {
        "Application_Type": "web"
      }
    },
    // API Azure Function
    {
      "apiVersion": "2018-11-01",
      "type": "Microsoft.Web/sites",
      "name": "[variables('apiName')]",
      "location": "[variables('location')]",
      "kind": "functionapp",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('apiName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('apiName'))]"
      ],
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('apiName'))]",
        "siteConfig": {
          "appSettings": [
            // API application settings
            {
              "name": "COSMOS_DATABASE_NAME",
              "value": "[variables('apiDbDatabaseName')]"
            },
            {
              "name": "COSMOS_CONTAINER_NAME",
              "value": "[variables('apiDbContainerName')]"
            },
            {
              "name": "COSMOS_CONNECTION_STRING",
              "value": "[concat('@Microsoft.KeyVault(SecretUri=', reference(concat('Microsoft.KeyVault/vaults/', variables('apiSecretStoreName'), '/secrets/', variables('apiDbConnectionStringSecretName'))).secretUriWithVersion, ')')]"
            },
            {
              "name": "WITHINGS_CLIENT_ID",
              "value": "[parameters('withingsClientId')]"
            },
            {
              "name": "WITHINGS_CLIENT_SECRET",
              "value": "[concat('@Microsoft.KeyVault(SecretUri=', reference(concat('Microsoft.KeyVault/vaults/', variables('apiSecretStoreName'), '/secrets/', variables('apiWithingsClientSecretName'))).secretUriWithVersion, ')')]"
            },
            {
              "name": "SB_CONNECTION_STRING",
              "value": "[concat('@Microsoft.KeyVault(SecretUri=', reference(concat('Microsoft.KeyVault/vaults/', variables('apiSecretStoreName'), '/secrets/', variables('apiJobsNamespaceAuthRuleSecretName'))).secretUriWithVersion, ')')]"
            },
            {
              "name": "API_PREFIX",
              "value": "[concat(reference(concat('Microsoft.ApiManagement/service/', variables('apiManagementName'))).gatewayUrl, '/', variables('apiPrefix'))]"
            },
            {
              "name": "NH_DISABLE",
              "value": "[if(and(variables('apnsDisabled'), variables('gcmDisabled')), '1', '0')]"
            },
            {
              "name": "NH_NAME",
              "value": "[variables('apiNotificationHubName')]"
            },
            {
              "name": "NH_CONNECTION_STRING_LISTEN",
              "value": "[concat('@Microsoft.KeyVault(SecretUri=', reference(concat('Microsoft.KeyVault/vaults/', variables('apiSecretStoreName'), '/secrets/', variables('apiNotificationHubListenPolicySecretName'))).secretUriWithVersion, ')')]"
            },
            {
              "name": "NH_CONNECTION_STRING_FULL",
              "value": "[concat('@Microsoft.KeyVault(SecretUri=', reference(concat('Microsoft.KeyVault/vaults/', variables('apiSecretStoreName'), '/secrets/', variables('apiNotificationHubFullPolicySecretName'))).secretUriWithVersion, ')')]"
            },
            {
              "name": "FHIR_SERVER_URL",
              "value": "[variables('apiFhirServiceUrl')]"
            },
            {
              "name": "TOKEN_STORE_URL",
              "value": "[variables('apiTokenStoreUrl')]"
            },
            {
              "name": "REDIS_HOSTNAME",
              "value": "[variables('apiCacheHostName')]"
            },
            {
              "name": "REDIS_PASSWORD",
              "value": "[concat('@Microsoft.KeyVault(SecretUri=', reference(concat('Microsoft.KeyVault/vaults/', variables('apiSecretStoreName'), '/secrets/', variables('apiCachePasswordSecretName'))).secretUriWithVersion, ')')]"
            },
            {
              "name": "B2C_AUDIENCE",
              "value": "[parameters('b2cClientId')]"
            },
            {
              "name": "B2C_ISSUER",
              "value": "[concat('https://', parameters('b2cTenantName'), '.b2clogin.com/', parameters('b2cTenantId'), '/v2.0/')]"
            },
            {
              "name": "B2C_TENANT_NAME",
              "value": "[parameters('b2cTenantName')]"
            },
            {
              "name": "B2C_POLICY_NAME",
              "value": "[parameters('b2cPolicyName')]"
            },
            // API runtime settings
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('apiName'), ';EndpointSuffix=', environment().suffixes.storage, ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('apiName')), '2019-06-01').keys[0].value)]"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('apiName'), ';EndpointSuffix=', environment().suffixes.storage, ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('apiName')), '2019-06-01').keys[0].value)]"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[toLower(variables('apiName'))]"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(concat('Microsoft.Insights/components/', variables('apiName'))).InstrumentationKey]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~3"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "dotnet"
            },
            {
              "name": "SCM_DO_BUILD_DURING_DEPLOYMENT",
              "value": "false"
            }
          ]
        }
      },
      "resources": [
        {
          "apiVersion": "2018-11-01",
          "type": "Microsoft.Web/sites/config",
          "name": "[concat(variables('apiName'), '/web')]",
          "location": "[variables('location')]",
          "dependsOn": [
            "[resourceId('Microsoft.ApiManagement/service', variables('apiManagementName'))]",
            "[resourceId('Microsoft.Web/sites', variables('apiName'))]"
          ],
          "properties": {
            // Restrict inbound traffic to management layer
            "ipSecurityRestrictions": [
              {
                "ipAddress": "[concat(first(reference(concat('Microsoft.ApiManagement/service/', variables('apiManagementName'))).publicIpAddresses), '/32')]",
                "action": "Allow",
                "priority": 100,
                "name": "AzureApiManagement"
              }
            ],
            // Disable access to kudu console
            "scmIpSecurityRestrictions": [
              {
                "ipAddress": "0.0.0.0/0",
                "action": "Deny",
                "priority": 100,
                "name": "DenyAll"
              }
            ],
            // Add health probe
            "healthCheckPath": "/health",
            // Link Swagger spec to API
            "apiDefinition": {
              "url": "[concat(reference(concat('Microsoft.ApiManagement/service/', variables('apiManagementName'))).gatewayUrl, '/', variables('apiPrefix'), '/swagger.json')]"
            },
            // Link management layer to API
            "apiManagementConfig": {
              "id": "[concat(resourceGroup().id, '/providers/Microsoft.ApiManagement/service/', variables('apiManagementName'), '/apis/', variables('apiManagementApiName'))]"
            }
          }
        }
      ]
    },
    // Store authentication data store connection string in KeyVault
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "name": "[concat(variables('apiSecretStoreName'), '/', variables('apiDbConnectionStringSecretName'))]",
      "apiVersion": "2016-10-01",
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('apiDbName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('apiSecretStoreName'))]"
      ],
      "properties": {
        "value": "[listConnectionStrings(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('apiDbName')), '2019-12-12').connectionStrings[0].connectionString]"
      }
    },
    // Store Withings client secret in KeyVault
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "name": "[concat(variables('apiSecretStoreName'), '/', variables('apiWithingsClientSecretName'))]",
      "apiVersion": "2016-10-01",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('apiSecretStoreName'))]"
      ],
      "properties": {
        "value": "[parameters('withingsClientSecret')]"
      }
    },
    // Authentication data store for API Azure Function
    {
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "name": "[variables('apiDbName')]",
      "apiVersion": "2020-03-01",
      "kind": "GlobalDocumentDB",
      "location": "[variables('location')]",
      "properties": {
        "consistencyPolicy": {
          "defaultConsistencyLevel": "Strong"
        },
        "locations": [
          {
            "locationName": "[variables('location')]"
          }
        ],
        "databaseAccountOfferType": "Standard",
        "enableAutomaticFailover": false
      },
      "resources": [
        {
          "type": "sqlDatabases",
          "name": "[variables('apiDbDatabaseName')]",
          "apiVersion": "2020-03-01",
          "dependsOn": [
            "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('apiDbName'))]"
          ],
          "properties":{
            "resource":{
              "id": "[variables('apiDbDatabaseName')]"
            },
            "options": {}
          },
          "resources": [
            {
              "type": "containers",
              "name": "[variables('apiDbContainerName')]",
              "apiVersion": "2020-03-01",
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('apiDbName'), variables('apiDbDatabaseName'))]"
              ],
              "properties": {
                "resource": {
                  "id":  "[variables('apiDbContainerName')]",
                  "partitionKey": {
                    "paths": [
                      "/id"
                    ],
                    "kind": "Hash"
                  },
                  "indexingPolicy": {
                    "indexingMode": "consistent",
                    "excludedPaths": [
                      {
                        "path": "/*"
                      }
                    ],
                    "includedPaths": [
                      {
                        "path": "/externalIds/*"
                      },
                      {
                        "path": "/fhirId/?"
                      }
                    ]
                  }
                },
                "options": {
                  "throughput": "[parameters('cosmosThroughput')]"
                }
              }
            }
          ]
        }
      ]
    }
    // #endregion
  ],
  "outputs": {
    "portalStorageAccountResourceId": {
      "type": "string",
      "value": "[concat(resourceGroup().id, '/providers/Microsoft.Storage/storageAccounts/', variables('portalName'))]"
    },
    "portalCdnEndpointHostName": {
      "type": "string",
      "value": "[concat(variables('portalCdnEndpointName'), '.azureedge.net')]"
    },
    "portalCdnEndpointResourceId": {
      "type": "string",
      "value": "[concat(resourceGroup().id, '/providers/Microsoft.Cdn/profiles/', variables('portalCdnName'), '/endpoints/', variables('portalCdnEndpointName'))]"
    },
    "apiTokenStoreName": {
      "type": "string",
      "value": "[variables('apiTokenStoreName')]"
    },
    "apiSecretStoreName": {
      "type": "string",
      "value": "[variables('apiSecretStoreName')]"
    },
    "apiFunctionStorageAccountResourceId": {
      "type": "string",
      "value": "[concat(resourceGroup().id, '/providers/Microsoft.Storage/storageAccounts/', variables('apiName'))]"
    },
    "apiPrefix": {
      "type": "string",
      "value": "[variables('apiPrefix')]"
    },
    "apiFunctionAppName": {
      "type": "string",
      "value": "[variables('apiName')]"
    },
    "apiHostName": {
      "type": "string",
      "value": "[reference(concat('Microsoft.Web/sites/', variables('apiName'))).defaultHostName]"
    },
    "apiDbName": {
      "type": "string",
      "value": "[variables('apiDbName')]"
    },
    "apiCacheName": {
      "type": "string",
      "value": "[variables('apiCacheName')]"
    },
    "apiManagementName": {
      "type": "string",
      "value": "[variables('apiManagementName')]"
    },
    "apiManagementApiName": {
      "type": "string",
      "value": "[variables('apiManagementApiName')]"
    },
    "apiManagementHostName": {
      "type": "string",
      "value": "[replace(reference(concat('Microsoft.ApiManagement/service/', variables('apiManagementName'))).gatewayUrl, 'https://', '')]"
    }
  }
}
